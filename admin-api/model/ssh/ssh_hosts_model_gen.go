// Code generated by goctl. DO NOT EDIT!

package ssh

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sshHostsFieldNames          = builder.RawFieldNames(&SshHosts{})
	sshHostsRows                = strings.Join(sshHostsFieldNames, ",")
	sshHostsRowsExpectAutoSet   = strings.Join(stringx.Remove(sshHostsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sshHostsRowsWithPlaceHolder = strings.Join(stringx.Remove(sshHostsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	sshHostsModel interface {
		Insert(ctx context.Context, data *SshHosts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SshHosts, error)
		FindOneByAddr(ctx context.Context, addr string) (*SshHosts, error)
		Update(ctx context.Context, newData *SshHosts) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSshHostsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SshHosts struct {
		Id       int64  `db:"id"`       // 主键
		Addr     string `db:"addr"`     // 地址
		User     string `db:"user"`     // 用户
		Port     string `db:"port"`     // 端口
		Password string `db:"password"` // 密码
		IdDel    string `db:"idDel"`    // 默认是0,1是删除
	}
)

func newSshHostsModel(conn sqlx.SqlConn) *defaultSshHostsModel {
	return &defaultSshHostsModel{
		conn:  conn,
		table: "`ssh_hosts`",
	}
}

func (m *defaultSshHostsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSshHostsModel) FindOne(ctx context.Context, id int64) (*SshHosts, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sshHostsRows, m.table)
	var resp SshHosts
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSshHostsModel) FindOneByAddr(ctx context.Context, addr string) (*SshHosts, error) {
	var resp SshHosts
	query := fmt.Sprintf("select %s from %s where `addr` = ? limit 1", sshHostsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, addr)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSshHostsModel) Insert(ctx context.Context, data *SshHosts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, sshHostsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Addr, data.User, data.Port, data.Password, data.IdDel)
	return ret, err
}

func (m *defaultSshHostsModel) Update(ctx context.Context, newData *SshHosts) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sshHostsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Addr, newData.User, newData.Port, newData.Password, newData.IdDel, newData.Id)
	return err
}

func (m *defaultSshHostsModel) tableName() string {
	return m.table
}
