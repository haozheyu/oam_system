// Code generated by goctl. DO NOT EDIT!

package user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	oamUserRoleFieldNames          = builder.RawFieldNames(&OamUserRole{})
	oamUserRoleRows                = strings.Join(oamUserRoleFieldNames, ",")
	oamUserRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(oamUserRoleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	oamUserRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(oamUserRoleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	oamUserRoleModel interface {
		Insert(ctx context.Context, data *OamUserRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OamUserRole, error)
		Update(ctx context.Context, newData *OamUserRole) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOamUserRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OamUserRole struct {
		Id             int64  `db:"id"`               // 编号
		Name           string `db:"name"`             // 角色名称
		RoleType       int64  `db:"role_type"`        // 角色类型
		CreateBy       string `db:"create_by"`        // 创建人
		CreateTime     int64  `db:"create_time"`      // 创建时间
		LastUpdateBy   string `db:"last_update_by"`   // 更新人
		LastUpdateTime int64  `db:"last_update_time"` // 更新时间
		DelFlag        int64  `db:"del_flag"`         // 是否删除  -1：已删除  0：正常
		Status         int64  `db:"status"`           // 状态  1:启用,0:禁用
	}
)

func newOamUserRoleModel(conn sqlx.SqlConn) *defaultOamUserRoleModel {
	return &defaultOamUserRoleModel{
		conn:  conn,
		table: "`oam_user_role`",
	}
}

func (m *defaultOamUserRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOamUserRoleModel) FindOne(ctx context.Context, id int64) (*OamUserRole, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oamUserRoleRows, m.table)
	var resp OamUserRole
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOamUserRoleModel) Insert(ctx context.Context, data *OamUserRole) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, oamUserRoleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.RoleType, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag, data.Status)
	return ret, err
}

func (m *defaultOamUserRoleModel) Update(ctx context.Context, data *OamUserRole) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, oamUserRoleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.RoleType, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag, data.Status, data.Id)
	return err
}

func (m *defaultOamUserRoleModel) tableName() string {
	return m.table
}
